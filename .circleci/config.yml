version: 2
jobs:
  build:

    working_directory: ~/circleci-demo-python-django
    docker:

      - image: circleci/python:3.6.8
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: pollsapp
          POSTGRES_DB: pollsapp_db


    steps:
      
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Installing Requirements
          command: |
            pip install --upgrade pip  
            sudo pip install pipenv
            pipenv install
            python3 -m pip install --user --upgrade twine
            sudo pip3 install -r requirements.txt
      
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          name: Coverage
          command: |
            pipenv run python manage.py test
            coverage run manage.py test
            coverage report --fail-under=90

      
            #      - run:
            #          name: Run Playbook
            #          command: |
            #           ansible-playbook deploy.yml -i hosts


      - run:
          name: verify git tag vs. version
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python setup.py verify


      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = deniskipkoech" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      

      - run:
          name: create packages
          command: |
            python3 setup.py sdist


      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*       


      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1

